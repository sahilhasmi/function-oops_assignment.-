{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"0q8KcOXHyqSA"},"outputs":[],"source":["\n","#1explain the importance of function\n","\n","###there are multiple importance of function is given below\n","\n","  #>> You can write a function once and use it multiple times, reducing repetitionand saving time.\n","\n","  #>> Code becomes clearer and more organized when grouped logically into functions.\n","\n","  #>> Functions break your program into smaller, manageable parts. This makes iteasier to understand, debug, and maintain.\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1749041170404,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"l5pxkeAOyqPf","outputId":"1e6d75dc-7cee-4dc8-ad72-af7b9dc0f1b3"},"outputs":[{"name":"stdout","output_type":"stream","text":["hello ram welcom to ds \n"]}],"source":["#2 Write a basia function to greet student\n","\n","def greet(name ):\n","  print(\"hello\",name, \"welcom to ds \" )\n","\n","greet(\"ram\")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VHP2NABCyqM6"},"outputs":[],"source":["#3 what is different between print and return\n","\n"," #>> print is a output function., it is not reusable\n","\n"," #>> return is a storage function., it is reusable\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9pQyN2p4yqKQ"},"outputs":[],"source":["#4 what are *args and **kwargs\n","\n"," #*args >> *args are represent an argument\n"," #**kwargs >> **kwargs are represent a key word argument\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1748176664203,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"z6FMdHFbyqFY","outputId":"63ab8dc5-b1ee-470a-ca5f-9eb289fcfd04"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","p\n","w\n"]}],"source":["#5 explain the iterator function\n","\n"," #>> iterator is an object that contains a countable number of values.\n"," #>> iterator has given one by one value of any object and data or substract one by one value .\n"," #>>#iterator is an object that is used to iterate over iterable objects\n"," #>>list, tuple, dict, string, sets\n","\n","#example :\n","num = [1,2,3,4,5,6,7 ]\n","for i in num:\n"," print(i )\n","\n","##example2:\n","s  = 'pwskill '\n","a = iter(s )\n","print(next(a))\n","print(next(a ))\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23,"status":"ok","timestamp":1748177735347,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"rNPw8y0_yqC1","outputId":"dbb7a919-e739-4bed-ca35-5432751c92b1"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","4\n","9\n","16\n","25\n"]}],"source":["#6  write a code that generates a squares of a numbers from 1 to n using generator\n","def  square_num_generator(n):\n","  for i in range(1,n+1 ):\n","    yield i**2\n","\n","gen = square_num_generator(5)\n","for i in gen:\n","  print(i )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1748675364161,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"2oPTr7yTypyK","outputId":"77113c55-3072-4566-e05a-2e245a53cbba"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","11\n","22\n","33\n","44\n","55\n","66\n","77\n","88\n","99\n","101\n","111\n"]}],"source":["#7 write code that generates palindromic numbers up to n using generator\n","def palindromic_generator(n ):\n","    for i in range(1,n+1):\n","      if str(i ) == str(i )[::-1]:\n","        yield i\n","gen = palindromic_generator(120 )\n","for i in gen:\n","  print(i )\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1748676152732,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"1LpPDU-NypvV","outputId":"3a8b7058-261c-4529-dd7d-b1c32af36f89"},"outputs":[{"name":"stdout","output_type":"stream","text":["2\n","4\n","6\n","8\n","10\n"]}],"source":["#8 write a code that generate even numbers from 2 to n using generator\n","\n","def even_num_gen(n ):\n","  for i in range(2,n+2 ):\n","      if i % 2 == 0:\n","        yield i\n","\n","gen = even_num_gen(10 )\n","for i in gen:\n","  print(i)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1748676804177,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"-xmmNhEAypp9","outputId":"99bb7342-58a4-4b09-cc98-b86147559239"},"outputs":[{"name":"stdout","output_type":"stream","text":["1\n","2\n","4\n","8\n","16\n","32\n","64\n","128\n"]}],"source":["#9 write a code that generates power of two up to n using generator\n","\n","def power_of_two(n ):\n","  for i in range(n+1 ):\n","    yield 2**i\n","gen = power_of_two(7)\n","for i in gen:\n","  print(i )\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1748695000929,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Xi-Am-Rfypne","outputId":"43fda5ad-bea0-48d1-eeb3-772c9b09c51b"},"outputs":[{"name":"stdout","output_type":"stream","text":["2\n","3\n","5\n","7\n","11\n","13\n","17\n","19\n","23\n","29\n","31\n","37\n","41\n","43\n","47\n"]}],"source":["##10 write code that generates prime numbers upto n using generator\n","\n","def prime_num(n ):\n"," for i in  range(2, n):\n","    for j in range(2,i ):\n","      if i%j == 0:\n","        break\n","    else :\n","      yield  i\n","gen = prime_num(50 )\n","for i in gen:\n","  print(i )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44,"status":"ok","timestamp":1749041116673,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Nhc9lqJaypk-","outputId":"6f5b5964-47fe-4995-935a-ca99d19bd9f0"},"outputs":[{"data":{"text/plain":["7"]},"execution_count":5,"metadata":{},"output_type":"execute_result"}],"source":["#11 write a code to uses lamba function calculate sum of two numbers.\n","add = lambda a,b: a+b\n","add(3, 4)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":216,"status":"ok","timestamp":1748695440817,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"J9xFtVwMyph2","outputId":"0804bc93-364d-40fa-a151-e6e8fffb566a"},"outputs":[{"data":{"text/plain":["64"]},"execution_count":22,"metadata":{},"output_type":"execute_result"}],"source":["#12 write a code to uses lamba function calculate aquare of a given numbers\n","square = lambda  a: a**2\n","square(8)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1748695836830,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"zmWV_6oiypUM","outputId":"66a78658-d047-4d1d-f0ed-efaeebf785d1"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'odd '"]},"execution_count":29,"metadata":{},"output_type":"execute_result"}],"source":["#13  write a code to uses lambda function to check whether  given number is  odd or even\n","odd_even = lambda a : 'even ' if a%2 == 0 else 'odd '\n","odd_even(9)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1748696204260,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"rE0HYFeGypRs","outputId":"a6b97772-8aaf-4d57-8eb7-5df31a5e8a08"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'pwskills'"]},"execution_count":36,"metadata":{},"output_type":"execute_result"}],"source":["#14 wirte code to uses lambda function to concatenate two  string\n","a = lambda a,b : a+b\n","a('pw','skills')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1749041527275,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"UZ60-Hro_Mx4","outputId":"bea55871-f924-49d8-81f8-8c3a10b0fb43"},"outputs":[{"data":{"text/plain":["3"]},"execution_count":7,"metadata":{},"output_type":"execute_result"}],"source":["# write a code that uses a lambda function to find the maximum of three given numbers\n","max_num = lambda a,b,c :max(a,b,c)\n","max_num(1,2,3 )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1748696817514,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"qaO97aOJypO9","outputId":"35e5a8f1-08ef-4c96-cda6-92d431fd5579"},"outputs":[{"data":{"text/plain":["[16, 36, 64]"]},"execution_count":49,"metadata":{},"output_type":"execute_result"}],"source":["#15 write a code that generats the even square number from a given list\n","def even_squar(n ):\n","  s = [ ]\n","  for i in n :\n","    if i%2 ==0:\n","     s.append(i**2 )\n","  return s\n","\n","even_squar([1,3,4,5,6,7,8,9])\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32,"status":"ok","timestamp":1748697138151,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"4P0KomSkypMb","outputId":"65b0bb67-ca60-4cbc-a6db-0d8929e4c9f5"},"outputs":[{"data":{"text/plain":["[1, 2, 3, 3, 8]"]},"execution_count":50,"metadata":{},"output_type":"execute_result"}],"source":["#16 write a code that calculate tha product of positive numbers from a given list\n","def positive_num(n ):\n","  s=[ ]\n","  for i in n :\n","    if i  > 0:\n","      s.append( i)\n","  return s\n","\n","positive_num([1,2,3,-3,-4,3,8,-9])"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1748697603216,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"YV5wYQ4zypJ1","outputId":"c59e832f-88ee-40e4-908d-32831c746ca2"},"outputs":[{"data":{"text/plain":["[2, 6, 90, 14, 18]"]},"execution_count":51,"metadata":{},"output_type":"execute_result"}],"source":["#17 write the code that doubles the values of odd numbers from a given list\n","def odd_double(n):\n","  d = []\n","  for i in n :\n","    if i%2 != 0:\n","      d.append(i*2 )\n","  return d\n","\n","odd_double([1,2,3,45,6,7,8,9])\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1749041719917,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Uwak_QFTypHj","outputId":"b7bfebc0-023b-4658-dee5-2b4fa8e07205"},"outputs":[{"data":{"text/plain":["595"]},"execution_count":9,"metadata":{},"output_type":"execute_result"}],"source":["#18 write a code that calculate sum of cubes of numbers from a given list\n","def sum_of_cube(n):\n","  c = []\n","  for i in n:\n","    c.append(i**3 )\n","  return sum(c)\n","\n","sum_of_cube([1,2,3,6,7])\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":89,"status":"ok","timestamp":1749041562688,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"yeOwRh5Zyotn","outputId":"821009ef-c6d3-4c3d-a0d0-ec422ca7a10d"},"outputs":[{"data":{"text/plain":["[1, 2, 3, 5, 7]"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["#21 write a code that filter out prime numbers from a given list\n","l = [1,2,3,4,5,6,7,8,9 ]\n","\n","def prime_num(l ):\n","  s=[]\n","  for i in l :\n","    for j in range(2,i ):\n","      if i%j ==0:\n","        break\n","    else :\n","      s.append(i )\n","  return s\n","\n","prime_num(l )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":22,"status":"ok","timestamp":1749040716520,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"oKMS8IbkyorN","outputId":"ad313d5e-529b-4100-c2fd-ec698be40feb"},"outputs":[{"data":{"text/plain":["7"]},"execution_count":4,"metadata":{},"output_type":"execute_result"}],"source":["#22  write a code that uses lambda function to calculate the sum of two numbers\n","add = lambda a,b,: a+b\n","add(3,4 )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1749041898636,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"qrPTUYI5yooi","outputId":"86818058-87d2-403d-a702-f898cd0964ad"},"outputs":[{"data":{"text/plain":["9"]},"execution_count":10,"metadata":{},"output_type":"execute_result"}],"source":["#23 write a code that uses a lambda function to calculate the square ofa given numbers\n","sq = lambda a:a*a\n","sq(3 )\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":61,"status":"ok","timestamp":1749042060156,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"MWlhMD_MyomD","outputId":"e1d82404-3b04-4e7d-faf0-ae492bae8861"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'even '"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["#24 write a code that uses a lambda function to check whether a given number is even or odd\n","odd_even = lambda a : 'even ' if a%2 == 0 else 'odd '\n","odd_even(10)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":100,"status":"ok","timestamp":1749042099651,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"OgDnH2MkyojE","outputId":"65403ba3-c4f9-4b68-c357-31087aabde36"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'pwskills'"]},"execution_count":12,"metadata":{},"output_type":"execute_result"}],"source":["#14 wirte code to uses lambda function to concatenate two  string\n","a = lambda a,b : a+b\n","a('pw','skills')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44,"status":"ok","timestamp":1749042147110,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"7ikOM68zyogm","outputId":"98ebfda6-d158-4cde-8387-714a38fc8f35"},"outputs":[{"data":{"text/plain":["6"]},"execution_count":13,"metadata":{},"output_type":"execute_result"}],"source":["# write a code that uses a lambda function to find the maximum of three given numbers\n","max_num = lambda a,b,c :max(a,b,c)\n","max_num(4,6,3 )\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"S7e8IYAJyoeE"},"outputs":[],"source":["#27 whta is encapsulation in oop\n","\n","  #> Encapsulation is a fundamental concept in  oop which is usually uses to hinding something\n","\n","  #> there are three type of access modifire 1.public, 2.protected , 3. private\n","\n","  #> boundling of data and methode\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hAykUP9_yobe"},"outputs":[],"source":["# explain the use of acess modifire in python classes\n","\n"," #>> acess modifire in python are three type 1.public,2.protected ,3.private\n","\n","    #>> 1.public modifier >> public modifier is acessible anywhere outside and inside the class\n","\n","    #>> 2.protected modifier >> within the class and its sub class protected, only  member can be accessed.\n","\n","    #>> 3.3.private modifier >> private modifier is acessible only by that member who is created the class\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Kq-R1HynyoYl"},"outputs":[],"source":["# what is ineritence in oop\n","\n","#>> inheritance in oop is that when  the function coll from parent cell in child cell , this is known as inheritance\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":71,"status":"ok","timestamp":1749537326335,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"cTdzORb1yoWK","outputId":"2dd61567-f83e-4437-9b49-3a5628ffbed4"},"outputs":[{"name":"stdout","output_type":"stream","text":[" welcom to pw skills   \n"]}],"source":["# defin the polymorphism in oop\n","\n","#>> polymorphism means > many forms\n","#>> where the person can take many forms at one time creation of data type\n","\n","\n","#>>example:\n","\n","class student :\n","  def student(self):\n","      print(\" welcom to pw skills \")\n","  def student(self, name = \"\"):\n","      print(\" welcom to pw skills \",name )\n","\n","  def student(self,name=\"\",course=\"\" ):\n","      print(\" welcom to pw skills \",name,course )\n","\n","\n","student1 =student()\n","student1.student()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U2svS-hPyoTg"},"outputs":[],"source":["## explain the method overriding in python\n","\n","\n","#>> Method overriding means that when a child class defines a method with the same name and parameters as a method in the parent class,\n","   #>> the child class's method will be executed instead of the parent's.\n","   #>>  This allows the child class to override the behavior of the parent class method.\"\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"BSpQQpJ-yoRH"},"outputs":[],"source":["## def a parent class animal with a method make_sound that print \"generic animal sound \". creat a child class DOG inheriting from animal with method make_sound that print \"woof \"\n","\n","class animal:\n","  def make_sound(self ):\n","    print(\"generic animal sound \")\n","\n","class dog(animal ):\n","  def make_sound(self ):\n","    print(\"woof \")\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":74,"status":"ok","timestamp":1749538790399,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"pseodHfdyoOj","outputId":"4057a4ae-bc74-4179-88d4-b68473716291"},"outputs":[{"name":"stdout","output_type":"stream","text":["woof \n"]}],"source":["dog1 = dog()\n","dog1.make_sound()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"fIAyC8ntyoLa"},"outputs":[],"source":["## def method move in the animal class that print 'animal moves' .overriding the move method in the dog class to  print 'dog runs'\n","class animal:\n","  def move(self ):\n","    print(\"animal moves \")\n","\n","class dog(animal ):\n","  def move(self ):\n","    print(\"dog runs \")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1749539256600,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Cm6EfrT0yoI9","outputId":"7028226b-41b0-47d9-877d-8c302471b0a1"},"outputs":[{"name":"stdout","output_type":"stream","text":["dog runs \n"]}],"source":["dog2 = dog( )\n","dog2.move( )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":79,"status":"ok","timestamp":1749539724919,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"48Vv37mFyoGi","outputId":"d6283c6c-ebea-46f3-d58e-58c00ec3c895"},"outputs":[{"name":"stdout","output_type":"stream","text":["giving birth to live \n"]}],"source":["## create a class Mammal with method reproduce that print 'giving birth to live yung' . create a class Dogmammal inheriting from both dog and Mammal .\n","\n","class mammal:\n","  def reproduce(self ):\n","    print('giving birth to live ')\n","\n","class Dogmammal(dog , mammal ):\n","  print('giving birth to live ')\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1749539782251,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"mpWbYANQyoEF","outputId":"da91046d-dafb-4564-ec78-4a68b6eee450"},"outputs":[{"name":"stdout","output_type":"stream","text":["giving birth to live \n"]}],"source":["dog3 = Dogmammal()\n","dog3.reproduce()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"dNN6MbPUyoBg"},"outputs":[],"source":["## create a class germanshepherd inheriting from dog and overriding method make_sound to print 'bark'.\n","\n","class germanshepherd(dog ):\n","  def make_sound(self ):\n","    print('bark ')"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":73,"status":"ok","timestamp":1749540113926,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"w3loQinpyn_K","outputId":"75f52d74-57c6-4773-f890-7b1425ed8eb4"},"outputs":[{"name":"stdout","output_type":"stream","text":["bark \n"]}],"source":["dog4 = germanshepherd()\n","dog4.make_sound()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"72FAmzayyn8W"},"outputs":[],"source":["## def constructer in both animal and dog classes with different initialization parameters\n","\n","\n","class animal:\n","  def __init__(self,species):\n","    self.species = species\n","\n","class dog(animal ):\n","  def __init__(self, species,name ,breed ):\n","    super().__init__(species )\n","    self.name = name\n","    self.breed = breed\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":83,"status":"ok","timestamp":1749545723364,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"fIMHx3ARyn6E","outputId":"b4d26719-1881-41eb-b9b4-e25b1b27223e"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'russian '"]},"execution_count":44,"metadata":{},"output_type":"execute_result"}],"source":["dog5 = dog('Mammal ','rummy ','russian ')\n","dog5.breed"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"EjzPaF54yn3Q"},"outputs":[],"source":["## what is abstraction in python ? , how is it Implemeted\n","\n","  #>> abstraction is a way to creat a body/skeleton  or simplifies the complexities of a function\n","#example:\n","\n","import abc\n","class pwskills:\n","  @abc.abstractmethod\n","  def student_details(self):\n","    pass\n","  @abc.abstractmethod\n","  def student_assignment(self):\n","    pass\n","  @abc.abstractmethod\n","  def student_marks(self):\n","    pass\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":46,"status":"ok","timestamp":1749563274054,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"SZEY5z_f_wur","outputId":"ce5d993f-2929-4b28-fd42-c8b2aaaae9e0"},"outputs":[{"data":{"text/plain":["('datascience student', 'ajay ')"]},"execution_count":8,"metadata":{},"output_type":"execute_result"}],"source":["class ds(pwskills):\n","  def student_details(self, name  ):\n","    return \"datascience student\",name\n","  def student_assignment(self ):\n","    return \"datascience assignment\"\n","  def student_marks():\n","    return \"datascience marks  \"\n","\n","student1 = ds()\n","student1.student_details(\"ajay \")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"50jLQxJ1yn0k"},"outputs":[],"source":["## explain the importance of abstraction in object oriented programming\n","\n","  #>> it's hiding complexities of code and give only result\n","  #>> it's provide a data type to run code with different class\n","  #>> abstraction ensures  that all  method of inheriting class is Implemeted\n","  #>> it's importance in oop like a guard, who confirms  the  cell is complete or not\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"J0U9E2aAynyH"},"outputs":[],"source":["## how are abstraction method different from regular method of python\n","\n","  #>> abstract method creat a way to reuse this in different class\n","  #>> while regular method runs only one time in one class"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g7s6HKO-ynvn"},"outputs":[],"source":["## how can you achieve abstraction using interface in python\n","\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"g4A9ArTNyntG"},"outputs":[],"source":["## can you provide an example of how abstraction can be utilized to create common  interface for a gruop of related class in python\n","\n","  #example :\n","import abc\n","class pwskills:\n","  @abc.abstractmethod\n","  def student_details(self ):\n","    pass\n","  @abc.abstractmethod\n","  def student_work(self ):\n","    pass\n","  @abc.abstractmethod\n","  def student_marks(self ):\n","    pass\n"," #>> this is a common interface for a gruop\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"rBGpVVJ1ynq5"},"outputs":[],"source":["## how does python achieve polymorphism tthrough method overriding\n","\n"," #> here is a example to understand how does python achieve polymorphism through method overriding\n","\n","class vehicle:\n","  def vehicle_imfo(self ):\n","    print(\"this is vehicle info \")\n","class car(vehicle ):\n","  def vehicle_imfo(self):\n","    print(\"this is car info \")\n","vehicle1 = car()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":35,"status":"ok","timestamp":1749650804003,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"hklL5RJ9ynol","outputId":"271a45be-1df0-40f1-9ed0-9ef25218dbc9"},"outputs":[{"name":"stdout","output_type":"stream","text":["this is car info \n"]}],"source":["vehicle1.vehicle_imfo()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ldETfrTPynmS"},"outputs":[],"source":["## define a base class with a method and a subclass that overrides the method\n","\n","class base_class:\n","  def class_info(self ):\n","    print(\"this is base class \")\n","class sub_class(base_class ):\n","  def class_info(self ):\n","    print(\"this is sub class \")\n","\n","class1 = sub_class()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":58,"status":"ok","timestamp":1749651213701,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"KTGMW6MaynjI","outputId":"cff3f18d-e9c0-490b-f893-495fb0061b8a"},"outputs":[{"name":"stdout","output_type":"stream","text":["this is sub class \n"]}],"source":["class1.class_info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X03yKZucyngR"},"outputs":[],"source":["## define a base class with multiple subclasss overridden method\n","class vehicle:\n","  def vehicle_info(self ):\n","    print(\"this is vehicle info \")\n","class car(vehicle ):\n","  def vehicle_info(self):\n","    print(\"this is car info \")\n","class truck(vehicle ):\n","  def vehicle_info(self ):\n","    print(\"this is truck info \")\n","class bike(vehicle ):\n","  def vehicle_info(self ):\n","    print(\"this is bike info \")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":43,"status":"ok","timestamp":1749651582528,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Sj51Y3yeylta","outputId":"15f8a3ed-0eed-43c8-be78-e86a8cf5749f"},"outputs":[{"name":"stdout","output_type":"stream","text":["this is truck info \n"]}],"source":["v2 = truck()\n","v2.vehicle_info()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":36,"status":"ok","timestamp":1749651611373,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"z_SSeLWfV4de","outputId":"a029e019-74ad-4386-ba21-04239d092480"},"outputs":[{"name":"stdout","output_type":"stream","text":["this is bike info \n"]}],"source":["v3 = bike()\n","v3.vehicle_info()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"OtCFhV6KV40Z"},"outputs":[],"source":["## how does polymorphism improve code readability and reusability\n","\n","  #>> polymorphism give a separate object to read easily\n","\n","  #>> it's give a way to perform one time creation code and it's apply with different object many times\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hqGlDIlJV5Ja"},"outputs":[],"source":["## describe how python support polymorphism with duck typing\n","\n","  #>>  not mention in the class\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"U7zMAEGJV5bF"},"outputs":[],"source":["## how do you achieve encapsulation in python\n","\n"," #>> there are three type of Encapsulation\n","                                         #> public\n","                                         #> protected\n","                                         #> private\n","\n"," #>> for public Encapsulation using only ( self.veriable )\n","\n"," #>> for protected Encapsulation using ( self._veriable )\n","\n"," #>> for private encapsulation using ( self.__veriable )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":25,"status":"ok","timestamp":1749716065737,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"OJzor-80V5qi","outputId":"84001b57-82a2-41f6-fefb-6204c243c451"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'love me '"]},"execution_count":3,"metadata":{},"output_type":"execute_result"}],"source":["## can encapsulation be bypassed in pthon ? if so , how?\n","\n","   #>> yes it be bypassed in python because in encapsulation we used only method not internal function\n","#example :\n","class python:\n","  def __init__(self):\n","    self.__mypython = \"love me \"\n","p = python()\n","p._python__mypython"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"M4IDSjs_V54h"},"outputs":[],"source":["## implement a class bankacount with a private balance attribute . include methods deposite , withdraw , and check the balance\n","\n","class Bankaccount :\n","\n","    def __init__(self, balance):\n","        self.__balance = balance\n","\n","    def deposit(self, amount):\n","        self.__balance = self.__balance + amount\n","\n","    def withdraw(self, amount):\n","        if self.__balance >= amount:\n","            self.__balance = self.__balance - amount\n","            return True\n","        else:\n","            return False\n","\n","    def check_balance(self):\n","        return self.__balance\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"E2g6YxrBV6E9"},"outputs":[],"source":["p1 = Bankaccount(20000)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"eQaf8F5kV6T9"},"outputs":[],"source":["p1.deposit(2000)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":70,"status":"ok","timestamp":1749654093258,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"XxO70f6ugo_U","outputId":"48a99f72-15ee-42a4-ac96-7d83f290c295"},"outputs":[{"data":{"text/plain":["22000"]},"execution_count":26,"metadata":{},"output_type":"execute_result"}],"source":["p1.check_balance()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1749717467941,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"U8DBDxe0gpUc","outputId":"0fadd3f1-9062-4099-e72b-4bc1e46bb3e1"},"outputs":[{"name":"stdout","output_type":"stream","text":["sahil@gmail.com\n","sahil@aagmail.com \n"]}],"source":["## devlop a person class with private  attributes name and email , and method to set and get email .\n","\n","class person:\n","  def __init__(self,name,email ):\n","    self.__name = name\n","    self.__email = email\n","\n","  def set_email(self,email ):\n","    self.__email = email\n","\n","  def get_email(self ):\n","    return self.__email\n","\n","p1 = person (\"sahil \",\"sahil@gmail.com\")\n","print(p1.get_email())\n","\n","p1.set_email(\"sahil@aagmail.com \")\n","print(p1.get_email())\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"qu328Xcdgpn1"},"outputs":[],"source":["## why is encapsulation considered a piller in object oreinted programme ?\n","\n","  #>> encapsulation considered a piller in oop because it plays in one class and operate that data in single unit\n","\n","  #>> this is protected from outsider\n","\n","  #>> it helps to create a saperate and protect class"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":47,"status":"ok","timestamp":1751024605111,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"IB5g6r89Ntwt","outputId":"28ba87a8-6af7-41e9-afff-d8a81d6ab0e0"},"outputs":[{"name":"stdout","output_type":"stream","text":["before execution \n","hello \n","after execution \n"]}],"source":["## create a decorater in python that adds functionality to a simple function by printing a message before and after the  function execution.\n","\n","def my_decorator(func ):\n"," def wrapper():\n","    print(\"before execution \")\n","    func()\n","    print(\"after execution \")\n"," return wrapper\n","@my_decorator\n","def say_hello():\n","  print(\"hello \")\n","\n","say_hello()\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1789,"status":"ok","timestamp":1751090937049,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"RbwMVm8uNt8r","outputId":"1673b5d3-6b5f-47da-a44a-818bfa697430"},"outputs":[{"name":"stdout","output_type":"stream","text":[" name of function: greet\n","Before execution\n","Hello, Sahil!\n","After execution\n"]}],"source":["## modify the decorator to accept arguments and print the function name along with the message .\n","\n","def my_decorator(func):\n","    def wrapper(*args, **kwargs):\n","        print(f\" name of function: {func.__name__}\")\n","        print(\"Before execution\")\n","        func(*args, **kwargs )\n","        print(\"After execution\")\n","\n","    return wrapper\n","\n","@my_decorator\n","def greet(name):\n","    print(f\"Hello, {name}!\")\n","\n","greet(\"Sahil\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":443,"status":"ok","timestamp":1751091911754,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Wj4anA9z-1OG","outputId":"67ca7beb-224e-4005-8b68-7690400c4882"},"outputs":[{"name":"stdout","output_type":"stream","text":["first line \n","second line \n","nice to meet you \n","third line  \n","fourth  line  \n"]}],"source":["## create two decorator, and applly  them to a single function. ensure that they execute in the order they are applied .\n","def first_decorator(func):\n","  def wrapper():\n","    print(\"first line \")\n","    func()\n","    print(\"fourth  line  \")\n","  return wrapper\n","\n","def second_decorator(func):\n","  def wrapper():\n","    print(\"second line \")\n","    func()\n","    print(\"third line  \")\n","  return wrapper\n","\n","@first_decorator\n","@second_decorator\n","def meeting():\n","  print(\"nice to meet you \")\n","meeting()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":486,"status":"ok","timestamp":1751092375693,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"Jcq0VyPP-2XL","outputId":"7d318c52-f925-4f88-e66b-73528cecb166"},"outputs":[{"name":"stdout","output_type":"stream","text":["hi \n","nice to meet you \n","bye \n"]}],"source":["## modify the decorator to accept and pass function arguments to the wrapped function\n","\n","def my_decorator(func ):\n","  def wrapper(*args, **kwargs ):\n","    print(\"hi \")\n","    func()\n","    print(\"bye \")\n","  return wrapper\n","\n","@my_decorator\n","def meet():\n","  print(\"nice to meet you \")\n","\n","meet()\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1751093572367,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"3F04QQpiOOWt","outputId":"f2cd3898-2107-4eb6-84f7-72ded22b1ed4"},"outputs":[{"name":"stdout","output_type":"stream","text":["hi \n","sahil \n","how are you \n","function name : mister\n"]}],"source":["## create a decorator to preserves the metadata of the originol function\n","from functools  import wraps\n","\n","def preserv_data(func):\n","  @wraps(func )\n","  def wrapper():\n","   print(\"hi \")\n","   func()\n","   print(\"how are you \")\n","  return wrapper\n","\n","@preserv_data\n","def mister():\n","  print(\"sahil \")\n","mister()\n","\n","\n","print(\"function name :\",mister.__name__ )"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":42,"status":"ok","timestamp":1751094203416,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"o8q36ZLsIz2W","outputId":"4206a5b8-24fd-4379-f677-b287da167f32"},"outputs":[{"data":{"text/plain":["5"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["## create a python class 'calculator' with a static method 'add' that takes in two number and return their sum\n","\n","class calculator:\n","  @staticmethod\n","  def add(a,b ):\n","    return a+b\n","calculator.add(2,3)"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":454,"status":"ok","timestamp":1751115179103,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"eVaFKKH6I0LI","outputId":"6bc85a60-450f-4a7f-8eb9-0bbdeb431534"},"outputs":[{"name":"stdout","output_type":"stream","text":["Total Employees: 4\n"]}],"source":["## create python class 'employee ' with class method 'get_employee_count' that return total number of employees created.\n","class Employee:\n","    employee_count = 0\n","\n","    def __init__(self, name):\n","        self.name = name\n","        Employee.employee_count += 1\n","\n","    @classmethod\n","    def get_employee_count(cls):\n","        return cls.employee_count\n","\n","e1 = Employee(\"Sahil\")\n","e2 = Employee(\"Aman\")\n","e3 = Employee(\"Neha\")\n","e4 = Employee(\"Raj \")\n","print(\"Total Employees:\", Employee.get_employee_count())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"executionInfo":{"elapsed":39,"status":"ok","timestamp":1751115702301,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"VpnMOv5pI0c8","outputId":"701b308f-4b9d-4bdd-b7a5-34b7a1f95fe9"},"outputs":[{"data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["' lihas'"]},"execution_count":11,"metadata":{},"output_type":"execute_result"}],"source":["## create a python class 'stringformatter' with a static method 'reverse_string' that takes a string as input and return its reverse\n","class stringformatter:\n","  @staticmethod\n","  def reverse_string(string):\n","    return string[::-1]\n","stringformatter.reverse_string(\"sahil \")\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":31,"status":"ok","timestamp":1751116406375,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"tMRecb-1I0ta","outputId":"30dd1db1-30eb-498e-b7d6-7d0d432a656d"},"outputs":[{"data":{"text/plain":["50.24"]},"execution_count":17,"metadata":{},"output_type":"execute_result"}],"source":["## create a python class 'circle' with a class method 'calculate_area' that calculates the area of circle given its radius\n","\n","class circle :\n","  @staticmethod\n","  def calculate_area(radius ):\n","    return 3.14*radius*radius\n","\n","area = circle()\n","area.calculate_area(4)\n","\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":44,"status":"ok","timestamp":1751117383439,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"CH0nOsF9I09y","outputId":"0b666151-0e46-499c-ccbf-c0fb2333f3cd"},"outputs":[{"data":{"text/plain":["446.0"]},"execution_count":18,"metadata":{},"output_type":"execute_result"}],"source":["## create a class 'tempratureconverter' with a static  method 'celcious_to_fahrenheit' that convert celcious to fahrenheit .\n","\n","class tempratureconverter:\n","  @staticmethod\n","  def celcious_to_fahrenheit(celcious ):\n","    return (celcious *9/5) + 32\n","\n","tm = tempratureconverter()\n","tm.celcious_to_fahrenheit(230 )\n"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18,"status":"ok","timestamp":1751117972716,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"8ll9q4mXI1L_","outputId":"38e77882-3c46-4494-e796-0fd5bf6c8e43"},"outputs":[{"name":"stdout","output_type":"stream","text":["this is magic \n"]}],"source":["## what is the purpose of the '__str__()' method in python class ? provide an example\n","\n","  #>> '__str__()' this a special method in python class, this is known as dunder method in python\n","  #>> its make a readable representation\n","#example\n","\n","class magic:\n","  def __str__(self ):\n","    return \"this is magic \"\n","print(magic())"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":34,"status":"ok","timestamp":1751192128978,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"},"user_tz":-330},"id":"C1NjikKFI1ap","outputId":"26b31adf-884c-4559-9e3f-27240616e0df"},"outputs":[{"output_type":"stream","name":"stdout","text":["3\n"]}],"source":["## how dose the '__len__()' method work in python ? provide an example\n","class BookShelf:\n","    def __init__(self, books):\n","        self.books = books\n","\n","    def __len__(self):\n","        return len(self.books)\n","\n","\n","shelf = BookShelf([\"Gita\", \"Ramayan\", \"Mahabharat\"])\n","print(len(shelf))"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"ppUgzR2yI1n5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751192352211,"user_tz":-330,"elapsed":35,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"fc45618e-0672-4b66-8db9-95551afc1e88"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["5"]},"metadata":{},"execution_count":6}],"source":["## explain usage of '__add__()' method in python ? provide an example\n","class add:\n","  def sum_of_num(self ,a,b ):\n","    return a+b\n","a = add( )\n","a.sum_of_num(2,3)\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"nGM3vp-_I11_","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1751192951185,"user_tz":-330,"elapsed":293,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"d985ee34-0420-4b72-e519-8d80fc201c17"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["3"]},"metadata":{},"execution_count":9}],"source":["## what is the purpose of '__getitem__()' method in python ? provide an example .\n","class bookshelf :\n","  def __init__(self , book):\n","    self.book = book\n","\n","  def __getitem__(self,index):\n","    return self.book[index]\n","\n","A = bookshelf([1,2,3,4,5,6])\n","A.__getitem__(2)"]},{"cell_type":"code","source":["## explain the usage of the '__iter__()' and '__next__()' method in python ? given a example using iterator .\n","class myiterator :\n","  def __init__(self,text ):\n","    self.text = text\n","    self.index = 0\n","\n","  def __iter__(self ):\n","    return self\n","\n","  def __next__(self ):\n","    if self.index < len(self.text):\n","      char = self.text[self.index]\n","      self.index += 1\n","      return char\n","\n","    else:\n","     raise StopIteration\n","\n","a1 = myiterator(\"sahil\")\n","for i in a1:\n","  print(i)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yHY6WaA2MsSc","executionInfo":{"status":"ok","timestamp":1751194008804,"user_tz":-330,"elapsed":13,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"4b40524a-8c42-4298-902b-4b52ac0a6345"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["s\n","a\n","h\n","i\n","l\n"]}]},{"cell_type":"code","source":["## what is the purpose of getter method in python ? provide an example demonstrating the use of getter method using property decorators\n","\n","  #>> we can access protected value with safely by using  @property decorator\n","\n","class student :\n","  def __init__(self,name ,mark ):\n","    self._name = name\n","    self._mark = mark\n","  @property\n","  def mark(self ):\n","    print(\"getting mark \")\n","    return self._mark\n","a1 = student(\"sahil \",44 )\n","print(a1.mark)"],"metadata":{"id":"YQAhWhk7Msgn","executionInfo":{"status":"ok","timestamp":1751197867371,"user_tz":-330,"elapsed":28,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"9b827683-9079-4c0c-9172-a7edcf90c0fa"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["getting mark \n","44\n"]}]},{"cell_type":"code","source":["## explain the role of the setter method in python . demonstrate how to use a setter method to modify a class attribute using property decorator .\n","class student :\n","  def __init__(self,name ,mark ):\n","    self._name = name\n","    self._mark = mark\n","  @property\n","  def mark(self ):\n","    print(\"getting mark \")\n","    return self._mark\n","\n","  @mark.setter\n","  def mark(self,value ):\n","    if 0 <= value <= 100:\n","      self._mark = mark\n","\n","    else:\n","      print(\"invalid mark hai \")\n","\n","a1 = student(\"sahil \", 55)\n","a1.mark = 110\n","print(a1.mark )"],"metadata":{"id":"Jg8dSBDgMsu3","executionInfo":{"status":"ok","timestamp":1751199874455,"user_tz":-330,"elapsed":48,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"b87f5ada-7222-4e6c-a1bf-50f7e85da290"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["invalid mark hai \n","getting mark \n","55\n"]}]},{"cell_type":"code","source":["## what is the purpose of @property decorator in python ? provide an example illustrating its usage\n","\n"," #>> the purpose of @property decorator in python to getting a readable value and safely read the protected values\n","\n","class employee :\n","  def __init__(self ,name , salary ):\n","    self._name = name\n","    self._salary = salary\n","  @property\n","  def details(self):\n","    return self._name,self._salary\n","\n","e1 = employee(\"sahil \",20000)\n","print(e1.details)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_-YB581ip2Y3","executionInfo":{"status":"ok","timestamp":1751200014518,"user_tz":-330,"elapsed":17,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"739d8a8f-b1b6-434b-e378-817978253f32"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["('sahil ', 20000)\n"]}]},{"cell_type":"code","source":["## explain the use of @deleter decorator in python property decorators . provide a code example demonstrating its application\n","class student :\n","  def __init__(self,name):\n","    self._name = name\n","\n","  @property\n","  def name(self ):\n","    print(\"getting name \")\n","    return self._name\n","  @name.deleter\n","  def name(self ):\n","    print(\"deleting name \")\n","    del self._name\n","a1 = student(\"sahil \")\n","a2 = student(\"ajay \")\n","print(a1.name)\n","del a2.name\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Oaes0Z9VyTig","executionInfo":{"status":"ok","timestamp":1751203048444,"user_tz":-330,"elapsed":29,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"afa8dd5f-f5cb-468b-e16d-cbc63959c7f5"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["getting name \n","sahil \n","deleting name \n"]}]},{"cell_type":"code","source":["## how dose encapsulation relate to property decorator in python ? provide an example showcasing encapsulation using property deorator.\n","class student :\n","  def __init__(self,name):\n","    self._name = name\n","\n","  @property\n","  def name(self ):\n","    print(\"getting name \")\n","    return self._name\n","\n","  @name.setter\n","  def name(self,value ):\n","    self._name = value\n","    print(\"setting name \")\n","    print(self._name)\n","\n","  @name.deleter\n","  def name(self ):\n","    print(\"deleting name \")\n","    del self._name\n","a1 = student(\"sahil \")\n","a2 = student(\"ajay \")\n","a2.name = \"aman \"\n","print(a1.name)\n","del a2.name\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WQj0GH6OyTyG","executionInfo":{"status":"ok","timestamp":1751204021641,"user_tz":-330,"elapsed":15,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"37ea146b-db1f-4a07-b024-e9219f007616"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["setting name \n","aman \n","getting name \n","sahil \n","deleting name \n"]}]},{"cell_type":"code","source":["## how dose encapsulation relate to property decorator in python ? provide an example showcasing encapsulation using property deorator.\n","class student :\n","  def __init__(self,name):\n","    self._name = name\n","\n","  @property\n","  def name(self ):\n","    print(\"getting name \")\n","    return self._name\n","\n","  @name.setter\n","  def name(self,value ):\n","    self._name = value\n","    print(\"setting name \")\n","    print(self._name)\n","\n","  @name.deleter\n","  def name(self ):\n","    print(\"deleting name \")\n","    del self._name\n","a1 = student(\"sahil \")\n","a2 = student(\"ajay \")\n","a2.name = \"aman \"\n","print(a1.name)\n","del a2.name\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"al_HGgTUyT-a","executionInfo":{"status":"ok","timestamp":1751204000959,"user_tz":-330,"elapsed":14,"user":{"displayName":"Sahil Hashmi","userId":"08337664068324234058"}},"outputId":"fbeea159-8f08-4b6a-a5d5-48dad07d0c51"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["setting name \n","aman \n","getting name \n","sahil \n","deleting name \n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"2xLuY4jXyULE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"L8aNjXc6yUXu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"A3CkaPx2yUkh"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"HIlOPVaPyUzU"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"10rPFpvFKT342kWW9Xh6YwV23KGkEoz6u","timestamp":1748180212352}],"authorship_tag":"ABX9TyPKP49+hzNFY899N3o9wdeV"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}